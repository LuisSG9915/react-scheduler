import { Scheduler } from "./lib";
import { useRef, Fragment, useState, useEffect } from "react";
import { SchedulerRef, ProcessedEvent, EventActions, Translations } from "./lib/types";
import {
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Modal,
  Input,
  SelectChangeEvent,
  Typography,
  Card,
  CardContent,
  Grid,
} from "@mui/material";

import axios from "axios";
import { EstilistaResponse } from "./lib/models/Estilista";
import { Servicio, ServicioPost } from "./lib/models/Servicio";
import { useClientes } from "./lib/hooks/useClientes";
import { format, startOfToday, setHours } from "date-fns";
import EditIcon from "@mui/icons-material/Edit";
import { DataGrid, GridColDef } from "@mui/x-data-grid";
import { Eventos } from "./lib/models/Events";
import { useProductosFiltradoExistenciaProducto } from "./lib/hooks/useProductosFiltradoExistenciaProducto";
import { jezaApi } from "./lib/api/jezaApi";
import DeleteIcon from "@mui/icons-material/Delete";
import MoreVertIcon from "@mui/icons-material/MoreVert";
import AddCircleIcon from "@mui/icons-material/AddCircle";
import { DateTimePicker } from "@mui/x-date-pickers/DateTimePicker";
import { LocalizationProvider } from "@mui/x-date-pickers";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFns";

// Generated by https://quicktype.io

function App() {
  const calendarRef = useRef<SchedulerRef>(null);
  const [datas, setDatas] = useState<Eventos[]>([]);
  const [datasEstilista, setDatasEstilista] = useState<EstilistaResponse[]>([]);
  const [datasServicios, setDatasServicios] = useState<[]>([]);
  const [dataEvent, setDataEvent] = useState<Eventos>({
    id: 0,
    event_id: "",
    title: "",
    description: "",
    start: new Date("20230713"),
    end: new Date("20230713"),
    admin_id: 0,
    color: "",
    horaFin: new Date("20230713"),
    fechaCita: new Date("20230713"),
    idUsuario: 0,
    cia: 0,
    sucursal: 0,
    d_sucursal: "",
    idCliente: 0,
    nombreCliente: "",
    tiempo: 0,
    idEstilista: 0,
    nombreEstilista: "",
    nombreRecepcionista: "",
    fechaAlta: "",
    estatus: 0,
    descripcionEstatus: "",
    fechaCambio: "",
    idcolor: 0,
    idEstatus: 0,
  });
  const [formServicio, setFormServicio] = useState<ServicioPost>({
    id_Cita: 0,
    idServicio: 0,
    cantidad: 0,
    precio: 0,
    observaciones: "",
    usuario: 0,
    d_servicio: "",
    id: 0,
  });
  const [formattedDatas, setFormattedDatas] = useState<Eventos[]>([]);
  const [mode, setMode] = useState<"default" | "tabs">("default");
  const [refreshKey, setRefreshKey] = useState(0); // Nuevo estado local

  // MODALS
  const [modalCliente, setmodalCliente] = useState(false);
  const [modalEstilista, setModalEstilista] = useState(false);
  const [modalCitaEdit, setModalCitaEdit] = useState(false);
  const [modalServicioEdit, setModalServicioEdit] = useState(false);
  const [modalProductoSelect, setModalProductoSelect] = useState(false);
  const clavesEmpleados = ["4", "5", "8", "9", "10"];
  const { dataClientes } = useClientes();
  const { dataProductos4 } = useProductosFiltradoExistenciaProducto({
    descripcion: "%",
    insumo: 0,
    inventariable: 0,
    obsoleto: 0,
    servicio: 1,
    sucursal: 21,
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setDataEvent((prevState: any) => ({ ...prevState, [name]: value }));
  };

  const debounce = <T extends (...args: any[]) => void>(func: T, delay: number) => {
    let timer: NodeJS.Timeout;
    return function (this: any, ...args: Parameters<T>) {
      clearTimeout(timer);
      timer = setTimeout(() => func.apply(this, args), delay);
    };
  };
  const handleChangeServicios = (event: { target: { name: any; value: any } }) => {
    const { name, value } = event.target;
    const delayedSetFormValues = debounce<typeof setFormServicio>(setFormServicio, 300);

    delayedSetFormValues((prevValues: ServicioPost) => ({
      ...prevValues,
      [name]: value,
    }));
    console.log(formServicio);
  };

  const handleChangeSelect = (event: SelectChangeEvent<number>) => {
    const selectedValue = event.target.value;
    const selectedName = event.target.name;
    setDataEvent((prevState: any) => ({ ...prevState, [selectedName]: selectedValue }));
  };

  const peticion = async () => {
    try {
      const response = await axios.get(
        "http://cbinfo.no-ip.info:9089/Cita?id=%&suc=%&estilista=%&f1=20230101&f2=20231212&cliente=%&estatus=%"
      );
      setDatas(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const peticionEstilista = async () => {
    try {
      const response = await axios.get("http://cbinfo.no-ip.info:9089/Trabajador?id=0");
      const reponseTemporal = response.data;
      const formattedData = reponseTemporal.map((evento: EstilistaResponse) => ({
        ...evento,
        admin_id: evento?.id ? evento?.id : 0,
        title: evento?.nombre ? evento?.nombre : "",
        mobile: evento?.nombre ? evento?.nombre : "",
      }));
      const elementosFiltrados = formattedData.filter((elemento: EstilistaResponse) =>
        clavesEmpleados.includes(elemento.clave_empleado)
      );
      setDatasEstilista(elementosFiltrados);
    } catch (error) {
      console.error(error);
    }
  };

  const getCitaServicios = async (id: number) => {
    try {
      const response = await axios.get(
        `http://cbinfo.no-ip.info:9089/Citaservicio?id=${id}&fecha=20230720&sucursal=21`
      );
      setDatasServicios(response.data);
      console.log(response.data);
    } catch (error) {
      console.error(error);
    }
  };
  useEffect(() => {
    peticionEstilista();
    peticion();
  }, []);

  useEffect(() => {
    changeLoadingValue(true);
    const formattedData = datas.map((evento: Eventos) => ({
      ...evento,
      start: evento.fechaCita ? new Date(evento.fechaCita) : new Date(),
      end: evento.horaFin ? new Date(evento.horaFin) : new Date(),
      admin_id: evento.idEstilista ? evento.idEstilista : 3,
      event_id: evento.id ? evento.id : 0,
      title:
        evento.estatus === 1
          ? "Tinte express"
          : evento.estatus === 2
          ? "Mechas californianas"
          : evento.estatus === 3
          ? "Corte de dama"
          : evento.estatus === 4
          ? "Alaciado"
          : "Trenzas",
      description: evento.nombreCliente,
      color:
        evento.estatus === 1
          ? "#46e09b"
          : evento.estatus === 2
          ? "green"
          : evento.estatus === 3
          ? "grey"
          : evento.estatus === 4
          ? "pink"
          : "purple",
    }));
    console.log({ formattedDatas });

    setFormattedDatas(formattedData);
  }, [datas]);
  const changeLoadingValue = (newLoadingValue) => {
    if (calendarRef.current && calendarRef.current.scheduler) {
      calendarRef.current.scheduler.loading = newLoadingValue;
    }
  };

  const handleConfirmEvent = async (
    event: ProcessedEvent,
    action: EventActions
  ): Promise<ProcessedEvent> => {
    // L贸gica para manejar la confirmaci贸n de eventos
    console.log("Evento confirmado:", event);
    console.log("Acci贸n:", action);
    if (action === "create") {
      const newEvent: Eventos = {
        id: 1,
        event_id: 5,
        title: event.title,
        description: event.description,
        start: event.start,
        end: event.end,
        admin_id: event.admin_id,
        color: "blue",
      };
      axios
        .post<Eventos>("http://localhost:3000/events", newEvent)
        .then(() => alert("REALIZADA"))
        .catch((e) => console.log({ e }));
    }
    if (action === "edit") {
      const editEvent: Eventos = {
        id: event.event_id,
        event_id: event.event_id,
        title: event.title,
        description: event.description,
        start: event.start,
        end: event.end,
        admin_id: event.admin_id,
        color: "blue",
      };
      axios
        .put<Eventos>(`http://localhost:3000/events/${event.event_id}`, editEvent)
        .then(() => console.log("exitoso"))
        .catch((e) => console.log(e));
    }
    return event;
  };

  const peticiones = async () => {
    try {
      const response = await axios.get(
        "http://cbinfo.no-ip.info:9089/Cita?id=%&suc=%&estilista=%&f1=20230101&f2=20231212&cliente=%&estatus=%"
      );
      const formattedData = response.data.map((evento: Eventos) => ({
        ...evento,
        start: evento.fechaCita ? new Date(evento.fechaCita) : new Date(),
        end: evento.horaFin ? new Date(evento.horaFin) : new Date(),
        admin_id: evento.idEstilista ? evento.idEstilista : 3,
        event_id: evento.id ? evento.id : 0,
        title:
          evento.estatus === 1
            ? "Tinte express"
            : evento.estatus === 2
            ? "Mechas californianas"
            : evento.estatus === 3
            ? "Corte de dama"
            : evento.estatus === 4
            ? "Alaciado"
            : "Trenzas",
        description: evento.nombreCliente,
        color:
          evento.estatus === 1
            ? "#46e09b"
            : evento.estatus === 2
            ? "green"
            : evento.estatus === 3
            ? "grey"
            : evento.estatus === 4
            ? "pink"
            : "purple",
      }));
      setRefreshKey((key) => key + 1); // Actualiza el estado local para forzar la actualizaci贸n del componente Scheduler
      setFormattedDatas(formattedData);
      console.log("peticiones");
    } catch (error) {
      console.error(error);
    }
  };
  const postCita = (idUsuario: number) => {
    axios
      .post(
        `http://cbinfo.no-ip.info:9089/Cita?cia=26&sucursal=21&fechaCita=${dataEvent.fechaCita}&idCliente=${dataEvent.idCliente}&tiempo=15&idEstilista=${idUsuario}&idUsuario=96&estatus=1`
      )
      .then((response) => {
        alert("Cita realizada");
        peticiones();
      });
  };
  const postServicio = () => {
    if (formServicio.cantidad !== 0 || formServicio.idServicio > 0) {
      jezaApi
        .post(
          `/CitaServicio?id_Cita=${formServicio.id_Cita}&idServicio=${
            formServicio.idServicio
          }&cantidad=${formServicio.cantidad}&precio=${formServicio.precio}&observaciones=${
            formServicio.observaciones
          }&usuario=${86}`
        )
        .then((response) => {
          getCitaServicios(formServicio.id_Cita);
          setFormServicio({
            ...formServicio,
            cantidad: 0,
            idServicio: 0,
            observaciones: "",
            precio: 0,
            usuario: 1,
            d_servicio: "",
          });
        });
    } else {
      alert("Datos vac铆os, intente de nuevo");
    }
  };

  const putServicio = () => {
    jezaApi
      .put(
        `/CitaServicio?id=${formServicio.id}&id_Cita=${formServicio.id_Cita}&idServicio=${formServicio.idServicio}&cantidad=${formServicio.cantidad}&precio=${formServicio.precio}&observaciones=${formServicio.observaciones}&usuario=21`
      )
      .then(() => {
        alert("Servicio actualizado");
        setModalServicioEdit(false);
        peticiones();
      });
  };

  const deleteServicio = (id: number) => {
    jezaApi.delete(`/CitaServicio?idServicio=${id}`).then(() => {
      alert("Eliminaci贸n exitosa");
      getCitaServicios(formServicio.id_Cita);
    });
  };

  const handleDeleteEvent = async (idEvent: number) => {
    deleteCita(idEvent);
  };

  const deleteCita = (id: number) => {
    axios
      .delete(`http://cbinfo.no-ip.info:9089/Cita?id=${id}`)
      .then((response) => alert("Cita eliminada con 茅xito"));
  };

  const putCita = (cita: ProcessedEvent) => {
    axios
      .put(
        `http://cbinfo.no-ip.info:9089/Cita?id=${
          cita.event_id
        }&cia=26&sucursal=21&fechaCita=${format(cita.start, "yyyy-MM-dd HH:mm")}&idCliente=${
          cita.idCliente
        }&tiempo=${cita.tiempo}&idEstilista=${cita.admin_id}&idUsuario=${cita.idUsuario}&estatus=${
          cita.estatus
        }`
      )
      // .then((response) => peticiones());
      .then((response) => (calendarRef.current.scheduler.events = formattedDatas));
  };
  const putCitaEstado = () => {
    console.log(dataEvent);
    axios
      .put(
        `http://cbinfo.no-ip.info:9089/Cita?id=${dataEvent.event_id}&cia=26&sucursal=21&fechaCita=${dataEvent.fechaCita}&idCliente=${dataEvent.idCliente}&tiempo=${dataEvent.tiempo}&idEstilista=${dataEvent.admin_id}&idUsuario=${dataEvent.idUsuario}&estatus=${dataEvent.idEstatus}`
      )
      .then((response) => {
        alert("Acci贸n realizada");
        peticiones();
        setModalCitaEdit(false);
      });
  };
  const handleDropEvent = async (
    droppedOn: Date,
    updatedEvent: ProcessedEvent,
    originalEvent: ProcessedEvent
  ) => {
    // L贸gica para manejar la confirmaci贸n de eventos

    console.log("Evento  updatedEvent", updatedEvent);
    console.log("Evento  droppedOn", droppedOn);
    console.log("Evento  originalEvent", originalEvent);
    changeLoadingValue(true);
    putCita(updatedEvent);
  };

  const columnsProductos4: GridColDef[] = [
    { field: "descripcion", headerName: "Descripcion", width: 200 },
    { field: "precio", headerName: "Precio", width: 100 },
    { field: "tiempo", headerName: "Tiempo", width: 80 },
    {
      field: "action",
      headerName: "Acciones",
      width: 200,
      // renderCell: (params) => <span>{params.row.precio}</span>,
      renderCell: (params) => (
        <Button
          variant={"contained"}
          onClick={() => {
            setFormServicio({
              ...formServicio,
              idServicio: params.row.id,
              precio: params.row.precio,
              d_servicio: params.row.descripcion,
            });
            setModalProductoSelect(false);
          }}
        >
          Agregar
        </Button>
      ),
    },
  ];

  const columnServicios: GridColDef[] = [];

  const minDateTime = setHours(startOfToday(), 8);

  const maxDateTime = setHours(startOfToday(), 20);

  useEffect(() => {}, []);

  return (
    <Fragment>
      <div style={{ textAlign: "center", width: 150 }}>
        <FormControl fullWidth>
          <InputLabel id="demo-simple-select-label">Sucursal</InputLabel>
          <Select labelId="demo-simple-select-label" id="demo-simple-select" label="Sucursal">
            <MenuItem value={10}>Mexico</MenuItem>
            <MenuItem value={20}>Monterrey</MenuItem>
            <MenuItem value={30}>Bodega</MenuItem>
          </Select>
        </FormControl>
        <Button
          color={mode === "default" ? "primary" : "inherit"}
          variant={mode === "default" ? "contained" : "text"}
          size="small"
          onClick={() => {
            setMode("default");
            calendarRef.current?.scheduler?.handleState("default", "resourceViewMode");
          }}
        >
          Default
        </Button>
        <Button
          color={mode === "tabs" ? "primary" : "inherit"}
          variant={mode === "tabs" ? "contained" : "text"}
          size="small"
          onClick={() => {
            setMode("tabs");
            calendarRef.current?.scheduler?.handleState("tabs", "resourceViewMode");
          }}
        >
          Tabs
        </Button>
      </div>
      {/* <div>
        <Button onClick={peticion}>Refresh Component</Button>
        <Button onClick={peticiones}>Refresh Component</Button>
      </div> */}
      {formattedDatas.length > 2 ? (
        <Scheduler
          key={refreshKey}
          day={{
            step: 30,
            startHour: 8,
            endHour: 20,
          }}
          ref={calendarRef}
          loading={calendarRef.current?.scheduler?.loading || false}
          month={null}
          // Event edit ID lo hace de manera 'automatica'
          onEventClick={(evento: any) => {
            setDataEvent(evento);
            console.log(evento);
            setFormServicio({ ...formServicio, id_Cita: Number(evento.id) });
            getCitaServicios(Number(evento.id));
          }}
          onConfirm={handleConfirmEvent}
          onDelete={handleDeleteEvent}
          customEditor={({ close, state }) => (
            <div style={{ marginRight: 75, marginLeft: 75, marginTop: 50, marginBottom: 10 }}>
              {dataEvent.description && dataEvent.description.length > 0 ? (
                <>
                  <div style={{ right: 10, top: 10, position: "absolute" }}>
                    <MoreVertIcon onClick={() => setModalCitaEdit(true)}> </MoreVertIcon>
                  </div>

                  <hr />
                  <h3> Servicios... </h3>
                  {/* ESCOJER SERVICIO */}
                  {datasServicios.length > 0 ? (
                    datasServicios.map((servicio: Servicio, index: number) => (
                      <div
                        key={index}
                        style={{ display: "flex", alignItems: "center", marginBottom: 10 }}
                      >
                        <Grid container>
                          <Grid item xs={12}>
                            <Card sx={{ width: "100%" }}>
                              <CardContent>
                                <Grid container alignItems="center" justifyContent="space-between">
                                  <Grid item>
                                    <Typography variant="body1">
                                      Servicio: {servicio.descripcion}
                                    </Typography>
                                    <Typography variant="caption">
                                      Cantidad: {servicio.cantidad + "   "}
                                    </Typography>
                                    <Typography variant="caption">
                                      {servicio.observaciones
                                        ? `Obseraci贸n: ${servicio.observaciones} `
                                        : ""}
                                    </Typography>
                                  </Grid>
                                  <Grid item>
                                    <DeleteIcon
                                      onClick={() => deleteServicio(Number(servicio.id))}
                                      style={{ marginLeft: "auto" }}
                                    />
                                    <EditIcon
                                      onClick={() => {
                                        setFormServicio({
                                          cantidad: servicio.cantidad,
                                          id_Cita: servicio.id_Cita,
                                          idServicio: servicio.idServicio,
                                          observaciones: servicio.observaciones,
                                          precio: servicio.precio,
                                          usuario: 1,
                                          d_servicio: servicio.descripcion,
                                          id: servicio.id,
                                        });
                                        setModalServicioEdit(true);
                                        console.log(servicio);
                                      }}
                                    />
                                  </Grid>
                                </Grid>
                              </CardContent>
                            </Card>
                          </Grid>
                        </Grid>
                      </div>
                    ))
                  ) : (
                    <p>No hay servicios en proceso</p>
                  )}
                  <hr />
                  <div style={{ display: "flex", flexDirection: "row", alignItems: "center" }}>
                    <h3>Agregar servicios</h3>
                    <AddCircleIcon
                      fontSize="large"
                      onClick={() => {
                        setModalProductoSelect(true);
                      }}
                    />
                  </div>
                  <p> Servicio: {formServicio.d_servicio}</p>
                  <TextField
                    label={"Cantidad"}
                    name="cantidad"
                    defaultValue={formServicio.cantidad}
                    onChange={handleChangeServicios}
                    fullWidth
                    size="small"
                    sx={{ marginBottom: "16px" }}
                  ></TextField>
                  <br />
                  <br />
                  <TextField
                    label={"Observaciones"}
                    name="observaciones"
                    defaultValue={formServicio.observaciones}
                    onChange={handleChangeServicios}
                    fullWidth
                    size="small"
                    sx={{ marginBottom: "16px" }}
                  ></TextField>
                  <Button
                    variant="contained"
                    onClick={() => {
                      postServicio();
                    }}
                  >
                    Guardar
                  </Button>
                  <br />
                  <br />
                  <hr />
                  <br />
                  <div style={{ display: "flex", justifyContent: "end" }}>
                    <Button
                      variant="contained"
                      color="error"
                      onClick={() => {
                        close();
                        setDatasServicios([]);
                        setDataEvent({
                          ...dataEvent,
                          description: "",
                          nombreCliente: "",
                          idCliente: 0,
                        });
                        peticiones();
                        setFormServicio({
                          ...formServicio,
                          cantidad: 0,
                          idServicio: 0,
                          observaciones: "",
                          precio: 0,
                          usuario: 1,
                          d_servicio: "",
                        });
                      }}
                    >
                      Salir
                    </Button>
                  </div>
                </>
              ) : (
                <>
                  <h2>Ingresar cita</h2>
                  {/* <p>Nombre del cliente</p>
                  <input
                    type="text"
                    defaultValue={state.description ? state.description.value : ""}
                  /> */}
                  {/* <p>Servicio:</p>
                  <input type="text" defaultValue={state.title ? state.title.value : ""} />
                  <br /> */}
                  <p>Fecha de cita</p>

                  <LocalizationProvider dateAdapter={AdapterDateFns}>
                    <DateTimePicker
                      timeSteps={{ minutes: 15 }}
                      minTime={minDateTime}
                      maxTime={maxDateTime}
                      sx={{ width: "100%", ml: 0.3 }}
                      timezone={"America/Mexico_City"}
                      ampm={false}
                      format="dd/MM/yyyy HH:mm" // Formato DDMMAAAA HH:mm (hora en formato 24 horas)
                      onChange={(fecha) => {
                        setDataEvent({
                          ...dataEvent,
                          fechaCita: format(fecha, "yyyy-MM-dd HH:mm:ss"),
                        });
                      }}
                    />
                  </LocalizationProvider>
                  <br />
                  <p>Cliente</p>
                  <Select name="nombreCliente" value={dataEvent.idCliente} disabled>
                    <MenuItem value={0}> Seleccione un cliente </MenuItem>
                    {dataClientes.map((cte) => (
                      <MenuItem key={cte.id_cliente} value={cte.id_cliente}>
                        {cte.nombre}
                      </MenuItem>
                    ))}
                  </Select>
                  <Button
                    style={{ width: 66, marginLeft: 10, height: 29 }}
                    variant="outlined"
                    color="primary"
                    onClick={() => setmodalCliente(true)}
                  >
                    Buscar
                  </Button>
                  <br />

                  {/* <p>Ejemplo</p>
                  <input type="text" defaultValue={state.example ? state.example.value : ""} /> */}
                  <br />
                  <br />
                  <Button
                    color="error"
                    variant="outlined"
                    onClick={() => {
                      close();
                      setDataEvent({
                        ...dataEvent,
                        description: "",
                        nombreCliente: "",
                        idCliente: 0,
                      });
                    }}
                    style={{ marginRight: 20 }}
                  >
                    Salir
                  </Button>
                  <Button variant="outlined" onClick={() => postCita(state.admin_id.value)}>
                    Guardar cita
                  </Button>
                  <br />
                  <br />
                </>
              )}
            </div>
          )}
          deletable={false}
          // EJEMPLO DE COMO ESTILISZAR LAS CARTAS DE LA AGENDA....
          // eventRenderer={(prop) => (
          //   <div draggable={prop.draggable} onClick={() => prop.onClick}>
          //     <h5>{prop.event.event_id}</h5>
          //     <h5>{prop.event.description}</h5>
          //   </div>
          // )}
          view={"day"}
          height={2}
          timeZone="America/Mexico_City"
          // editable={false}
          onEventDrop={handleDropEvent}
          events={formattedDatas}
          resources={datasEstilista}
          resourceFields={{
            idField: "admin_id",
            textField: "admin_id",
            // textField: "title",
            subTextField: "mobile",
            avatarField: "title",
            // colorField: "color",
          }}
          fields={[
            {
              name: "admin_id",
              type: "select",
              default: datasEstilista[0].admin_id,
              options: datasEstilista.map((res) => {
                return {
                  id: res.admin_id ? res.admin_id : 0,
                  text: `${res.title}  `,
                  value: res.admin_id ? res.admin_id : 0, //Should match "name" property
                };
              }),
              config: { label: "Assignee", required: true },
            },
          ]}
        />
      ) : // Aqui pongo un cargado...
      null}

      <Modal open={modalCliente} onClose={() => setmodalCliente(false)}>
        <div
          style={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            width: 400,
            height: "80%",
            backgroundColor: "#fff",
            padding: 16,
            borderRadius: 4,
            overflow: "auto", // Aplicar scroll si el contenido excede el tama帽o del contenedor
          }}
        >
          <h2> B煤squeda de clientes </h2>
          {dataClientes.map((cliente) => (
            <>
              <div
                style={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center", // Corregir "alignContent" a "alignItems"
                  marginBottom: 8, // Agregar margen inferior entre elementos
                }}
              >
                <p key={cliente.id_cliente}>{cliente.nombre}</p>
                <Button
                  variant="outlined"
                  onClick={() => {
                    setmodalCliente(false);
                    setDataEvent({ ...dataEvent, idCliente: cliente.id_cliente });
                  }}
                >
                  Seleccionar
                </Button>
              </div>
            </>
          ))}
        </div>
      </Modal>
      <Modal open={modalEstilista} onClose={() => setModalEstilista(false)}>
        <div
          style={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            width: 400,
            height: "80%",
            backgroundColor: "#fff",
            padding: 16,
            borderRadius: 4,
            overflow: "auto", // Aplicar scroll si el contenido excede el tama帽o del contenedor
          }}
        >
          <h2> B煤squeda de estilista </h2>
          {datasEstilista.map((cliente) => (
            <>
              <div
                style={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center", // Corregir "alignContent" a "alignItems"
                  marginBottom: 8, // Agregar margen inferior entre elementos
                }}
              >
                <p key={cliente.id}>{cliente.nombre + cliente.id}</p>
                <Button
                  variant="outlined"
                  onClick={() => {
                    setDataEvent({ ...dataEvent, idEstilista: cliente.id });
                    setModalEstilista(false);
                    console.log(dataEvent.idEstilista);
                  }}
                >
                  Seleccionar
                </Button>
              </div>
            </>
          ))}
        </div>
      </Modal>
      <Modal open={modalCitaEdit} onClose={() => setModalCitaEdit(false)}>
        <div
          style={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            width: 400,
            height: "70%",
            backgroundColor: "#fff",
            padding: 16,
            borderRadius: 4,
            overflow: "auto", // Aplicar scroll si el contenido excede el tama帽o del contenedor
          }}
        >
          <h2> Edici贸n de citas </h2>
          <p>Cambiar estado de cita</p>
          <FormControl sx={{ width: "100%" }} variant="outlined">
            <Select
              defaultValue={0}
              name="idEstatus"
              value={dataEvent.idEstatus}
              onChange={handleChangeSelect}
            >
              <MenuItem value={0}> Escoja un estado </MenuItem>
              <MenuItem value={2}> Cita confirmada </MenuItem>
              <MenuItem value={3}> Cancelar cita </MenuItem>
              <MenuItem value={4}> Cita a domicilio </MenuItem>
              <MenuItem value={5}> Cliente en proceso </MenuItem>
            </Select>
          </FormControl>
          <br />
          <br />
          <Typography> Cambiar la fecha </Typography>
          <LocalizationProvider dateAdapter={AdapterDateFns}>
            <DateTimePicker
              timeSteps={{ minutes: 15 }}
              minTime={minDateTime}
              maxTime={maxDateTime}
              sx={{ width: "100%", ml: 0.3 }}
              timezone={"America/Mexico_City"}
              ampm={false}
              format="dd/MM/yyyy HH:mm" // Formato DDMMAAAA HH:mm (hora en formato 24 horas)
            />
          </LocalizationProvider>
          <br />
          <br />
          <Typography> Cambiar cliente </Typography>
          <Select sx={{ width: "75%" }} name="nombreCliente" value={dataEvent.idCliente} disabled>
            <MenuItem value={0}> Seleccione un cliente </MenuItem>
            {dataClientes.map((cte) => (
              <MenuItem key={cte.id_cliente} value={cte.id_cliente}>
                {cte.nombre}
              </MenuItem>
            ))}
          </Select>
          <Button
            style={{ width: 66, marginLeft: 10, height: 29 }}
            variant="outlined"
            color="primary"
            onClick={() => setmodalCliente(true)}
          >
            Buscar
          </Button>
          <br />
          <br />
          <Typography> Cambiar estilista </Typography>
          <Select sx={{ width: "75%" }} name="idEstilista" value={dataEvent.idEstilista} disabled>
            <MenuItem value={0}> Seleccione un estilista </MenuItem>
            {datasEstilista.map((cte) => (
              <MenuItem key={cte.id} value={cte.id}>
                {cte.nombre}
              </MenuItem>
            ))}
          </Select>
          <Button
            style={{ width: 66, marginLeft: 10, height: 29 }}
            variant="outlined"
            color="primary"
            onClick={() => setModalEstilista(true)}
          >
            Buscar
          </Button>
          <br />
          {/* <Button onClick={() => edit()}> Guardar </Button> */}
          <div style={{ position: "absolute", bottom: 10, right: 10 }}>
            <Button color="warning" onClick={() => setModalCitaEdit(false)}>
              Salir
            </Button>
            <Button onClick={() => putCitaEstado()}> Guardar </Button>
          </div>
        </div>
      </Modal>

      <Modal
        open={modalServicioEdit}
        onClose={() => {
          setModalServicioEdit(false);
          setFormServicio({
            cantidad: 0,
            id_Cita: 0,
            idServicio: 0,
            observaciones: "",
            precio: 0,
            usuario: 1,
            d_servicio: "",
            id: 0,
          });
        }}
      >
        <div
          style={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            width: 400,
            height: "60%",
            backgroundColor: "#fff",
            padding: 16,
            borderRadius: 4,
            overflow: "auto", // Aplicar scroll si el contenido excede el tama帽o del contenedor
          }}
        >
          <h2> Edici贸n de servicio... </h2>
          <FormControl sx={{ m: 1, width: "95%" }} variant="outlined">
            <Typography> Servicio </Typography>
            <TextField
              size="small"
              value={formServicio.d_servicio}
              disabled
              sx={{
                backgroundColor: "lightgray",
              }}
            ></TextField>
            <br />
            <Typography> Cantidad </Typography>
            <TextField
              size="small"
              defaultValue={formServicio.cantidad}
              name="cantidad"
              onChange={handleChangeServicios}
            ></TextField>
            <br />
            <Typography> Observaciones </Typography>
            <TextField
              size="small"
              defaultValue={formServicio.observaciones}
              multiline
              maxRows={4}
              name="observaciones"
              onChange={handleChangeServicios}
            ></TextField>
          </FormControl>
          <br />
          {/* <Button onClick={() => edit()}> Guardar </Button> */}
          <div style={{ position: "absolute", bottom: 10, right: 10 }}>
            <Button
              variant={"contained"}
              color="error"
              onClick={() => {
                setFormServicio({
                  cantidad: 0,
                  id_Cita: 0,
                  idServicio: 0,
                  observaciones: "",
                  precio: 0,
                  usuario: 1,
                  d_servicio: "",
                  id: 0,
                });
                setModalServicioEdit(false);
              }}
            >
              Salir
            </Button>
            <Button variant={"contained"} onClick={() => putServicio()}>
              Guardar
            </Button>
          </div>
        </div>
      </Modal>

      <Modal
        open={modalProductoSelect}
        onClose={() => {
          setModalProductoSelect(false);
          peticiones();
        }}
      >
        <div
          style={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            width: "50%",
            height: "70%",
            backgroundColor: "#fff",
            padding: 16,
            borderRadius: 4,
            overflow: "auto", // Aplicar scroll si el contenido excede el tama帽o del contenedor
          }}
        >
          <h2> Selecci贸n de servicio </h2>
          <DataGrid
            rows={dataProductos4}
            columns={columnsProductos4}
            autoHeight
            initialState={{
              pagination: {
                paginationModel: {
                  pageSize: 5,
                },
              },
            }}
            pageSizeOptions={[5]}
            disableRowSelectionOnClick
          ></DataGrid>
          <br />
          <br />
          <br />

          {/* <Button onClick={() => edit()}> Guardar </Button> */}
          <div style={{ position: "absolute", bottom: 10, right: 10 }}>
            <Button
              color="error"
              variant={"contained"}
              onClick={() => {
                setModalProductoSelect(false);
              }}
            >
              Salir
            </Button>
          </div>
        </div>
      </Modal>
    </Fragment>
  );
}

export default App;
