import { useRef, Fragment, useState, useEffect } from "react";
import {
  Button,
  Select,
  MenuItem,
  SelectChangeEvent,
  Grid,
  Dialog,
  CircularProgress,
} from "@mui/material";
import axios from "axios";
import { format, startOfToday, setHours } from "date-fns";
import { GridColDef } from "@mui/x-data-grid";
import { Scheduler } from "..";
import { EstilistaResponse } from "../models/Estilista";
import { Eventos } from "../models/Events";
import { ServicioPost, Servicio } from "../models/Servicio";
import { SchedulerRef, ProcessedEvent, EventActions } from "../types";
import { useNavigate } from "react-router-dom";
import { EVENTS } from "../../data";
import "../../App.css";
// Generated by https://quicktype.io

function SchedulerScreen() {
  const [loading, setLoading] = useState(true);

  const calendarRef = useRef<SchedulerRef>(null);
  const [datas, setDatas] = useState<Eventos[]>([]);
  const [datasEstilista, setDatasEstilista] = useState<EstilistaResponse[]>([]);
  const [datasServicios, setDatasServicios] = useState<[]>([]);
  const [dataEvent, setDataEvent] = useState<Eventos>({
    id: 0,
    event_id: "",
    title: "",
    description: "",
    start: new Date("20230713"),
    end: new Date("20230713"),
    admin_id: 0,
    color: "",
    horaFin: new Date("20230713"),
    fechaCita: new Date("20230713"),
    idUsuario: 0,
    cia: 0,
    sucursal: 0,
    d_sucursal: "",
    idCliente: 0,
    nombreCliente: "",
    tiempo: 0,
    idEstilista: 0,
    nombreEstilista: "",
    nombreRecepcionista: "",
    fechaAlta: "",
    estatus: 0,
    descripcionEstatus: "",
    fechaCambio: "",
    idcolor: 0,
    idEstatus: 0,
  });
  const [formServicio, setFormServicio] = useState<ServicioPost>({
    id_Cita: 0,
    idServicio: 0,
    cantidad: 0,
    precio: 0,
    observaciones: "",
    usuario: 0,
    d_servicio: "",
    id: 0,
  });
  const [formattedDatas, setFormattedDatas] = useState<Eventos[]>([]);
  const [mode, setMode] = useState<"default" | "tabs">("default");
  const [refreshKey, setRefreshKey] = useState(0); // Nuevo estado local
  const navigate = useNavigate();

  // MODALS

  const idSuc = new URLSearchParams(window.location.search).get("idSuc");
  const suc = new URLSearchParams(window.location.search).get("suc");
  const idRec = new URLSearchParams(window.location.search).get("idRec");
  useEffect(() => {
    setDataEvent({ ...dataEvent, sucursal: Number(idSuc), d_sucursal: suc, idRec: Number(idRec) });
    if (!idSuc) {
      alert("Favor de ingresar en la página principal");
    }
  }, []);

  const handleChangeSelect = (event: SelectChangeEvent<number>) => {
    const selectedValue = event.target.value;
    const selectedName = event.target.name;
    setDataEvent((prevState: any) => ({ ...prevState, [selectedName]: selectedValue }));
  };

  const peticionEstilista = async () => {
    if (dataEvent.sucursal !== 0) {
      setLoading(true);

      try {
        const response = await axios.get(
          `http://cbinfo.no-ip.info:9089/Estilistas?suc=${dataEvent.sucursal}`
        );
        const reponseTemporal = response.data;
        const formattedData = reponseTemporal.map((evento: EstilistaResponse) => ({
          ...evento,
          admin_id: evento?.id ? evento?.id : 0,
          title: evento?.nombre ? evento?.nombre : "",
          mobile: evento?.descripcion_puesto ? evento?.descripcion_puesto : "",
        }));
        // const elementosFiltrados = formattedData.filter((elemento: EstilistaResponse) =>
        //   clavesEmpleados.includes(elemento.clave_empleado)
        // );
        setDatasEstilista(formattedData);
        // setRefreshKey((key) => key + 1); // Actualiza el estado local para forzar la actualización del componente Scheduler
      } catch (error) {
        console.error(error);
      }
    }
  };

  const getCitaServicios = async (id: number) => {
    try {
      const response = await axios.get(
        `http://cbinfo.no-ip.info:9089/Citaservicio?id=${id}&fecha=20230727&sucursal=21`
      );
      setDatasServicios(response.data);
      console.log(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  useEffect(() => {
    changeLoadingValue(true);
    const formattedData = datas.map((evento: Eventos) => ({
      ...evento,
      start: evento.fechaCita ? new Date(evento.fechaCita) : new Date(),
      end: evento.horaFin ? new Date(evento.horaFin) : new Date(),
      admin_id: evento.idEstilista ? evento.idEstilista : 3,
      event_id: evento.id ? evento.id : 0,
      title: evento.idCliente.toString() + "," + evento.tiempo,
      description: evento.nombreCliente,
      color:
        evento.estatus === 1
          ? "#46e09b"
          : evento.estatus === 2
          ? "green"
          : evento.estatus === 3
          ? "grey"
          : evento.estatus === 4
          ? "pink"
          : evento.estatus === 5
          ? "lightblue"
          : evento.estatus === 6
          ? "purple"
          : evento.estatus === 7
          ? "lightblue"
          : evento.estatus === 8
          ? "yellow"
          : "lightblue",
    }));
    setFormattedDatas(formattedData);
  }, [datas]);

  const changeLoadingValue = (newLoadingValue) => {
    if (calendarRef.current && calendarRef.current.scheduler) {
      calendarRef.current.scheduler.loading = newLoadingValue;
    }
  };

  const handleConfirmEvent = async (
    event: ProcessedEvent,
    action: EventActions
  ): Promise<ProcessedEvent> => {
    // Lógica para manejar la confirmación de eventos
    console.log("Evento confirmado:", event);
    console.log("Acción:", action);
    if (action === "create") {
      const newEvent: Eventos = {
        id: 1,
        event_id: 5,
        title: event.title,
        description: event.description,
        start: event.start,
        end: event.end,
        admin_id: event.admin_id,
        color: "blue",
      };
      axios
        .post<Eventos>("http://localhost:3000/events", newEvent)
        .then(() => alert("REALIZADA"))
        .catch((e) => console.log({ e }));
    }
    if (action === "edit") {
      const editEvent: Eventos = {
        id: event.event_id,
        event_id: event.event_id,
        title: event.title,
        description: event.description,
        start: event.start,
        end: event.end,
        admin_id: event.admin_id,
        color: "blue",
      };
      axios
        .put<Eventos>(`http://localhost:3000/events/${event.event_id}`, editEvent)
        .then(() => console.log("exitoso"))
        .catch((e) => console.log(e));
    }
    return event;
  };

  const peticiones = async () => {
    await peticionEstilista().then(async () => {
      const temp = new Date(nuevaFechaPrueba);
      const formattedDate = format(temp, "yyyyMMdd");
      try {
        const response = axios.get(
          `http://cbinfo.no-ip.info:9089/Cita?id=%&suc=${
            dataEvent.sucursal ? dataEvent.sucursal : 21
          }&estilista=%&f1=${formattedDate}&f2=${formattedDate}&cliente=%&estatus=%`
        );

        const formattedData = (await response).data.map((evento: Eventos) => ({
          ...evento,
          start: evento.fechaCita ? new Date(evento.fechaCita) : new Date(),
          end: evento.horaFin ? new Date(evento.horaFin) : new Date(),
          admin_id: evento.idEstilista ? evento.idEstilista : 3,
          event_id: evento.id ? evento.id : 0,
          title: evento.idCliente.toString() + "," + evento.tiempo + "," + evento.idEstilista,
          description: evento.nombreCliente,
          color:
            evento.estatus === 1
              ? "#46e09b"
              : evento.estatus === 2
              ? "green"
              : evento.estatus === 3
              ? "grey"
              : evento.estatus === 4
              ? "pink"
              : evento.estatus === 5
              ? "lightblue"
              : evento.estatus === 6
              ? "purple"
              : evento.estatus === 7
              ? "lightblue"
              : evento.estatus === 8
              ? "yellow"
              : "lightblue",
        }));
        setTimeout(() => {
          setRefreshKey((key) => key + 1); // Actualiza el estado local para forzar la actualización del componente Scheduler
          setLoading(false);
        }, 1000);

        setFormattedDatas(formattedData);
        // changeLoadingValue(false);
      } catch (error) {
        console.error(error);
      }
    });
  };

  const handleDeleteEvent = async (idEvent: number) => {
    deleteCita(idEvent);
  };

  const deleteCita = (id: number) => {
    axios
      .delete(`http://cbinfo.no-ip.info:9089/Cita?id=${id}`)
      .then((response) => alert("Cita eliminada con éxito"));
  };

  const putCita = (cita: ProcessedEvent) => {
    axios
      .put(
        `http://cbinfo.no-ip.info:9089/Cita?id=${cita.event_id}&cia=26&sucursal=${
          dataEvent.sucursal
        }&fechaCita=${format(cita.start, "yyyy-MM-dd HH:mm")}&idCliente=${cita.idCliente}&tiempo=${
          cita.tiempo
        }&idEstilista=${cita.admin_id}&idUsuario=${cita.idUsuario}&estatus=${cita.estatus}`
      )
      .then((response) => peticiones())
      .catch((e) => alert(e));

    // .then((response) => (calendarRef.current.scheduler.events = formattedDatas));
  };

  const handleDropEvent = async (
    droppedOn: Date,
    updatedEvent: ProcessedEvent,
    originalEvent: ProcessedEvent
  ) => {
    setLoading(true);
    changeLoadingValue(true);
    putCita(updatedEvent);
  };

  const currentDates = new Date();
  const ligaProductiva = "http://cbinfo.no-ip.info:9085/";
  const ligaLocal = "http://localhost:3000/";

  const handleOpenNewWindow = () => {
    const url = `${ligaLocal}Cliente`; // Reemplaza esto con la URL que desees abrir
    const width = 500;
    const height = 1500;
    const left = (window.screen.width - width) / 2;
    const top = (window.screen.height - height) / 2;
    const features = `width=${width},height=${height},left=${left},top=${top},toolbar=0,location=0,menubar=0,scrollbars=1,resizable=1`;
    window.open(url, "_blank", features);
  };
  const handleOpenNewWindowCreateCitaScreen = ({ idUsuario, fecha }) => {
    const url = `${ligaLocal}CreateCitaScreen?idUser=${idUsuario}&fecha=${fecha}&idSuc=${dataEvent.sucursal}&idRec=${idRec}`; // Reemplaza esto con la URL que desees abrir
    const width = 1000;
    const height = 800;
    const left = (window.screen.width - width) / 2;
    const top = (window.screen.height - height) / 2;
    const features = `width=${width},height=${height},left=${left},top=${top},toolbar=0,location=0,menubar=0,scrollbars=1,resizable=1`;
    window.open(url, "_blank", features);
  };
  const handleOpenNewWindowCitaScreen = ({ idCita, idUser, idCliente, fecha }) => {
    const url = `${ligaLocal}CitaScreen?idCita=${idCita}&idUser=${idUser}&idCliente=${idCliente}&fecha=${fecha}&idSuc=${dataEvent.sucursal}&idRec=${idRec}`; // Reemplaza esto con la URL que desees abrir
    const width = 1200;
    const height = 1200;
    const left = (window.screen.width - width) / 2;
    const top = (window.screen.height - height) / 2;
    const features = `width=${width},height=${height},left=${left},top=${top},toolbar=0,location=0,menubar=0,scrollbars=1,resizable=1`;
    window.open(url, "_blank", features);
  };

  const fechaInicial = new Date();
  const [nuevaFechaPrueba, setNuevaFechaPrueba] = useState<Date>(fechaInicial);

  useEffect(() => {
    setLoading(true);
    peticiones();
  }, [nuevaFechaPrueba]);

  useEffect(() => {
    setLoading(true);
    peticiones();
  }, [dataEvent.sucursal]);

  useEffect(() => {
    peticionEstilista();
  }, [idSuc, dataEvent.sucursal, !datasEstilista]);
  const overlayClass = loading ? "overlay active" : "overlay";

  return (
    <div>
      <div style={{ textAlign: "center", width: 150 }}>
        <Button
          color={mode === "default" ? "primary" : "inherit"}
          variant={mode === "default" ? "contained" : "text"}
          size="small"
          onClick={() => {
            setMode("default");
            calendarRef.current?.scheduler?.handleState("default", "resourceViewMode");
          }}
        >
          Default
        </Button>
        <Button
          color={mode === "tabs" ? "primary" : "inherit"}
          variant={mode === "tabs" ? "contained" : "text"}
          size="small"
          onClick={() => {
            setMode("tabs");
            calendarRef.current?.scheduler?.handleState("tabs", "resourceViewMode");
          }}
        >
          Tabs
        </Button>
      </div>

      <Dialog open={loading} fullWidth maxWidth={"xs"}>
        <div className="">
          <br />
          <CircularProgress size={50} />
        </div>
        <br />
      </Dialog>
      <Grid container justifyContent="flex-end">
        <Select
          labelId="demo-simple-select-label"
          id="demo-simple-select"
          label="Sucursal"
          value={dataEvent.sucursal}
          onChange={handleChangeSelect}
          name="sucursal"
          size="small"
        >
          <MenuItem value={0}>Seleccione una sucursal</MenuItem>
          <MenuItem value={21}>Barrio</MenuItem>
          <MenuItem value={26}>San Pedro</MenuItem>
          <MenuItem value={27}>CDMX</MenuItem>
        </Select>

        <Button
          onClick={() => {
            handleOpenNewWindow();
          }}
        >
          Agregar Clientes
        </Button>
      </Grid>
      <Button onClick={() => calendarRef.current.scheduler.handleGotoDay(currentDates)}></Button>
      <Scheduler
        key={refreshKey}
        day={{
          step: 30,
          startHour: 8,
          endHour: 20,
        }}
        ref={calendarRef}
        month={null}
        onEventClick={(evento: any) => {
          setDataEvent(evento);
          setFormServicio({ ...formServicio, id_Cita: Number(evento.id) });
          getCitaServicios(Number(evento.id));
        }}
        onSelectedDateChange={(date) => {
          setNuevaFechaPrueba(date);
        }}
        onConfirm={handleConfirmEvent}
        onDelete={handleDeleteEvent}
        customEditor={({ close, state }) => {
          if (Number(idSuc) === Number(dataEvent.sucursal)) {
            if (state.description.value.length > 0) {
              handleOpenNewWindowCitaScreen({
                idCita: state.event_id.value,
                idUser: state.admin_id.value,
                idCliente: state.title.value,
                fecha: state.start.value,
              });
            } else {
              handleOpenNewWindowCreateCitaScreen({
                idUsuario: state.admin_id.value,
                fecha: state.start.value,
              });
            }
          } else {
            close();
            alert("No cuenta con permisos para realizar acciones en otras sucursales");
          }
          // console.log(state);
          return (
            <Button
              onClick={() => {
                close();
                peticiones();
              }}
            >
              Salir
            </Button>
          );
        }}
        deletable={false}
        // EJEMPLO DE COMO ESTILISZAR LAS CARTAS DE LA AGENDA....
        // eventRenderer={(prop) => (
        //   <div draggable={prop.draggable} onClick={() => prop.onClick}>
        //     <h5>{prop.event.event_id}</h5>
        //     <h5>{prop.event.description}</h5>
        //   </div>
        // )}
        view={"day"}
        selectedDate={nuevaFechaPrueba}
        height={2}
        timeZone="America/Mexico_City"
        // editable={false}
        onEventDrop={handleDropEvent}
        events={formattedDatas ? formattedDatas : EVENTS}
        resources={datasEstilista}
        resourceFields={{
          idField: "admin_id",
          textField: "title",
          // Subtext puedo ingresar el tipo de estilista
          subTextField: "mobile",
          avatarField: "title",
          // colorField: "color",
        }}
        fields={[
          {
            name: "admin_id",
            type: "select",
            default:
              datasEstilista.length > 0 && datasEstilista[0].admin_id
                ? datasEstilista[0].admin_id
                : 0,
            options: datasEstilista.map((res) => {
              return {
                id: res.admin_id ? res.admin_id : 0,
                text: `${res.title}  `,
                value: res.admin_id ? res.admin_id : 0, //Should match "name" property
              };
            }),
            config: { label: "Assignee", required: true },
          },
        ]}
      />
    </div>
  );
}

export default SchedulerScreen;
